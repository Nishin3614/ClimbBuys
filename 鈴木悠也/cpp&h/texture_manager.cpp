// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// テクスチャー管理処理 [texture_manager.cpp]
// Author : KOKI NISHIYAMA
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "texture_manager.h"

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ宣言
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define TEXTURE_FILE "data/LOAD/TEXTURE/texture_manager.csv"

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::vector<LPDIRECT3DTEXTURE9> CTexture_manager::m_st_vpTexture;

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CTexture_manager::CTexture_manager()
{

}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CTexture_manager::~CTexture_manager()
{
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// テクスチャー情報の開放
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTexture_manager::UnLoad(void)
{
	// 行ごとに回す
	for (int nCntLine = 0; nCntLine < (signed)m_st_vpTexture.size(); nCntLine++)
	{
		if (m_st_vpTexture[nCntLine] != NULL)
		{
			m_st_vpTexture[nCntLine]->Release();
			m_st_vpTexture[nCntLine] = NULL;
		}
	}
	// テクスチャー情報の開放
	std::vector<LPDIRECT3DTEXTURE9>().swap(m_st_vpTexture);
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// テクスチャー読み込み
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CTexture_manager::Load(void)
{
	// 変数宣言
	LPDIRECT3DDEVICE9 pDevice =					// デバイスの取得
		CManager::GetRenderer()->GetDevice();
	LPDIRECT3DTEXTURE9 pTex = NULL;
	// ファイルの中身格納用
	std::vector<std::vector<std::string>> vsvec_Contens;
	// ファイルの中身を取得する
	vsvec_Contens = CCalculation::FileContens(TEXTURE_FILE, ',');
	// 行ごとに回す
	for (int nCntLine = 0; nCntLine < (signed)vsvec_Contens.size(); nCntLine++)
	{
		// 項目ごとに回す
		for (int nCntItem = 0; nCntItem < (signed)vsvec_Contens.at(nCntLine).size(); nCntItem++)
		{
			switch (nCntItem)
			{
				// パス情報
			case 0:
				// テクスチャー生成
				D3DXCreateTextureFromFile(
					pDevice,
					vsvec_Contens.at(nCntLine).at(nCntItem).c_str(),
					&pTex);
				// テクスチャー追加
				m_st_vpTexture.push_back(pTex);
				// ヌルにする
				pTex = NULL;
				break;
			default:
				break;
			}
		}
	}
	// std::vectorの多重配列開放
	std::vector<std::vector<std::string>>().swap(vsvec_Contens);
	return S_OK;
}

// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// テクスチャー取得
// --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
LPDIRECT3DTEXTURE9 CTexture_manager::GetTexture(int const & nTextureId)
{
	// テクスチャー上限内
	if (nTextureId < (signed)m_st_vpTexture.size() &&
		nTextureId >= 0)
	{
		return m_st_vpTexture[nTextureId];
	}
	// テクスチャー上限外なら返す
	return NULL;
}
