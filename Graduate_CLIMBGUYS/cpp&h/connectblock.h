// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 結合ブロック処理 [connectblock.h]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifndef _CONNECTBLOCK_H_
#define _CONNECTBLOCK_H_

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// インクルードファイル
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "renderer.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 前方宣言
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class CBaseblock;	// ベースブロッククラス

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 構造体
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// クラス
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class CConnectblock
{
public:
	/* 列挙型 */
	// 形情報
	typedef enum
	{
		SHAPE_CROSS_STEP_01 = 0,		// クロスブロック_1段
		SHAPE_CROSS_STEP_02,			// クロスブロック_2段
		SHAPE_PLUS_CENTER_HOLE_STEP_01,	// 中空きプラスブロック_1段
		SHAPE_PLUS_CENTER_HOLE_STEP_02,	// 中空きプラスブロック_2段
		SHAPE_PLUS,						// プラスブロック
		SHAPE_PLUS_CENTER_PROTRUSION,	// 中突起プラスブロック
		SHAPE_DIAGONAL_01,				// 対角線ブロック_01
		SHAPE_DIAGONAL_02,				// 対角線ブロック_02
		SHAPE_BEARD_01,					// 髭ブロック_01
		SHAPE_BEARD_02,					// 髭ブロック_02
		SHAPE_BEARD_03,					// 髭ブロック_03
		SHAPE_BEARD_04,					// 髭ブロック_040
		SHAPE_MAX						// 最大数
	} SHAPE;

	// チュートリアルのリスポーンするブロック
	enum class RESPAWN_BLOCK
	{
		TYPE_NONE = -1,
		TYPE_NORMAL_UP,					// ノーマル上
		TYPE_NORMAL_LEFT,				// ノーマル左
		TYPE_NORMAL_RIGHT,				// ノーマル右
		TYPE_NORMAL_DOWN,				// ノーマル下
		TYPE_SPRING,					// バネ
		TYPE_BOMB,						// ボム
		TYPE_PANIC,						// パニック
		TYPE_STEEL,						// 鋼鉄
		TYPE_ELECTRIC,					// 電気
		TYPE_MAX
	};
	/* 構造体 */

	/* 関数 */
	// コンストラクタ
	CConnectblock();
	// デストラクタ
	~CConnectblock();
	// 結合ブロック全ソースの読み込み
	static HRESULT Load(void);
	// 結合ブロック全ソースの開放
	static void UnLoad(void);

	// 作成(シーン管理)
	//	pos			: 位置
	//	shape		: 形情報
	//	layer		: レイヤー
	static void TestCreate(void);

	// 更新_ブロック生成
	static void Update_CreateBlock(void);

	// チュートリアルのブロックの初期配置
	static void Tutorial_InitArrangementBlock(void);

	// チュートリアルのブロックの更新
	static void Tutorial_UpdateArrangementBlock(void);

#ifdef _DEBUG
	// デバッグ処理
	virtual void  Debug(void);
	//static void BombConnectBlock(CBaseblock::GRID Grid);
#endif // _DEBUG
#if IMGUI_DEBUG

	static void StaticDebug(void);

#endif // IMGUI_DEBUG
	// ブロックの設定
	static void SetBlockShape(void);
	// 特殊ブロックの設定
	static void SetSpecialBlock(void);
protected:
	/* 関数 */
	// 設定 //
private:
	/* 関数 */
	/* 変数 */
	static int				m_nCntTime;												// カウントタイム

	static CBaseblock		*m_pTutorialRespawnBlock[(int)RESPAWN_BLOCK::TYPE_MAX];	// チュートリアルのリスポーンブロック
};

#endif