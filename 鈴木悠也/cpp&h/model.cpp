//=============================================================================
//
// モデル処理 [player.cpp]
// Author : KOKI NISHIYAMA
//
//=============================================================================
#include "model.h"
#include "light.h"
#include "shadow_mapping.h"

//=============================================================================
// マクロ定義
//=============================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CModel::CModel()
{
	m_posDest = D3DVECTOR3_ZERO;
	m_posDiff = D3DVECTOR3_ZERO;
	m_rotDest = D3DVECTOR3_ZERO;
	m_rotDiff = D3DVECTOR3_ZERO;
	m_nFrame = 0;
	m_nParent = 0;
	m_nFrame = 0;
	m_fAlpha = 1.0f;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CModel::~CModel()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CModel::Init(void)
{
	/*
	m_Xmodel.pos = D3DVECTOR3_ZERO;
	m_Xmodel.posDest = D3DVECTOR3_ZERO;
	m_Xmodel.posDiff = D3DVECTOR3_ZERO;
	m_Xmodel.rot = D3DVECTOR3_ZERO;
	m_Xmodel.rotDest = D3DVECTOR3_ZERO;
	m_Xmodel.rotDiff = D3DVECTOR3_ZERO;
	m_Xmodel.nParent = 0;
	*/
	m_nFrame = 0;
	// シーンXの初期化
	CScene_X::Init();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CModel::Uninit(void)
{
	// シーンXの終了
	CScene_X::Uninit();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CModel::Update(void)
{
	// 変数宣言
	D3DXVECTOR3 &pos = CScene_X::GetPos();	// 位置
	D3DXVECTOR3 &rot = CScene_X::GetRot();	// 回転
	// モデル事のモーション動作
	pos += m_posDiff / (float)m_nFrame;
	rot += m_rotDiff / (float)m_nFrame;
	// シーンXの更新
	CScene_X::Update();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CModel::Draw(void)
{
	//// 変数宣言
	//LPDIRECT3DDEVICE9	pDevice = CManager::GetRenderer()->GetDevice();

	//D3DXMATRIX			mtxRot, mtxTrans;		// 計算用マトリックス
	//D3DXMATERIAL		*pMat;					// 現在のマテリアル保存
	//D3DMATERIAL9		matDef;					// マテリアルデータのポインタ
	//// ワールドマトリックスの初期化
	//D3DXMatrixIdentity(&m_mtxWorld);
	//// 回転を反映
	//D3DXMatrixRotationYawPitchRoll(&mtxRot,
	//	m_Xmodel.rot.y,
	//	m_Xmodel.rot.x,
	//	m_Xmodel.rot.z);

	//// 行列の積(1:ワールド行列 = 2:ワールド行列 * 3:回転行列)
	//D3DXMatrixMultiply(&m_mtxWorld,
	//	&m_mtxWorld, &mtxRot);

	//// 位置を反映 //
	//// 平行移動行列作成(オフセット)
	//D3DXMatrixTranslation(&mtxTrans,	// 総合の入れ物
	//	m_Xmodel.pos.x,
	//	m_Xmodel.pos.y,
	//	m_Xmodel.pos.z);

	//// 行列の積(1:ワールド行列 = 2:ワールド行列 * 3:移動行列)
	//D3DXMatrixMultiply(&m_mtxWorld,	// 1
	//	&m_mtxWorld,				// 2
	//	&mtxTrans);					// 3

	//// 親情報を持っているとき
	//if (m_Parent != NULL)
	//{
	//	// 親と子の行列の積(1:ワールド行列 = 2:ワールド行列 * 3:体[親]行列)
	//	D3DXMatrixMultiply(&m_mtxWorld,
	//		&m_mtxWorld,
	//		&m_Parent->m_mtxWorld);
	//}
	//// すべての親の場合
	//else
	//{
	//	// 親と子の行列の積(1:ワールド行列 = 2:ワールド行列 * 3:体[親]行列)
	//	D3DXMatrixMultiply(&m_mtxWorld,
	//		&m_mtxWorld,
	//		&mtx);
	//}

	//// シャドウがonかどうか
	//if (m_bShadow)
	//{
	//	// やること
	//	// モデル情報もXで
	//	/*
	//	// シャドウマッピング
	//	CShadowmapping::Draw(
	//		pDevice,	// デバイス情報
	//		m_Xmodel,	// モデル情報
	//		m_mtxWorld	// マトリックス情報
	//	);
	//	*/
	//}
	//// ワールドマトリックスの設定
	//pDevice->SetTransform(D3DTS_WORLD, &m_mtxWorld);
	//// 現在のマテリアルを取得
	//pDevice->GetMaterial(&matDef);
	//// マテリアル情報に対するポインタを取得
	//pMat = (D3DXMATERIAL*)m_Xmodel.pBuffMat->GetBufferPointer();

	//// カウントマテリアル
	//for (int nCntMat = 0; nCntMat < (int)m_Xmodel.nNumMat; nCntMat++, pMat++)
	//{
	//	pMat->MatD3D.Diffuse.a = fAlpha;
	//	// マテリアルの設定
	//	pDevice->SetMaterial(&pMat->MatD3D);
	//	// テクスチャー設定
	//	pDevice->SetTexture(0, m_Xmodel.ppTexture[nCntMat]);
	//	// 描画
	//	m_Xmodel.pMesh->DrawSubset(nCntMat);
	//}
	//// マテリアルをデフォルトに戻す
	//pDevice->SetMaterial(&matDef);
	// シーンXの描画
	CScene_X::Draw();
	SetModelAlpha(m_fAlpha);
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 生成処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CModel * CModel::Create()
{
	// 変数宣言
	CModel * pModel;	// モデル
	// メモリ確保
	pModel = new CModel();
	// 初期化
	pModel->Init();
	// 情報を返す
	return pModel;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// モデルの情報渡し処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CModel::BindModel(
	MODEL_OFFSET const &offset	// モデルのオフセット
)
{
	// 変数宣言
	D3DXVECTOR3 &pos = CScene_X::GetPos();	// 位置
	D3DXVECTOR3 &rot = CScene_X::GetRot();	// 回転
	// モデルのオフセット
	pos = offset.pos;
	rot = offset.rot;
	m_nParent = offset.nParent;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期モーションの設定処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CModel::BeginMotion(
	KEY const &key,
	int const nMaxFrame
)
{
	// 変数宣言
	D3DXVECTOR3 &pos = CScene_X::GetPos();	// 位置
	D3DXVECTOR3 &rot = CScene_X::GetRot();	// 回転
	pos = key.pos;
	rot = key.rot;
	m_posDest = key.pos;
	m_rotDest = key.rot;
	m_posDiff = (m_posDest - pos);
	m_rotDiff = (m_rotDest - rot);
	m_nFrame = nMaxFrame;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// モーションの設定処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CModel::SetMotion(
	KEY const &key, 
	int const nMaxFrame
)
{
	// 変数宣言
	D3DXVECTOR3 &pos = CScene_X::GetPos();	// 位置
	D3DXVECTOR3 &rot = CScene_X::GetRot();	// 回転
	m_posDest = key.pos;
	m_rotDest = key.rot;
	m_posDiff = (m_posDest - pos);
	m_rotDiff = (m_rotDest - rot);
	m_nFrame = nMaxFrame;
}
