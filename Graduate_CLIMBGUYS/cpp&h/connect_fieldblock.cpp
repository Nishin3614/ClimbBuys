// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 結合フィールドブロック処理 [connect_fieldblock.cpp]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "connect_fieldblock.h"
#include "fieldblock.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define CONNECT_FIELDBLOCK_FILE	("data/LOAD/MAPPING/fieldblock.csv")

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::vector<std::vector<CConnect_fieldblock::LOAD>>	CConnect_fieldblock::m_Dvec_pFileLoad = {};		// ファイルの読み込み情報

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// オーバーローバーコンストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CConnect_fieldblock::CConnect_fieldblock() : CScene::CScene()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CConnect_fieldblock::~CConnect_fieldblock()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnect_fieldblock::Init()
{

	// フィールドループ
	for (size_t nCntField = 0; nCntField < m_Dvec_pFileLoad.size(); nCntField++)
	{
		// 変数宣言
		std::vector<CBaseblock *> vec_Block;	// ベースブロック情報
		// ブロックのループ
		for (size_t nCntBlock = 0; nCntBlock < m_Dvec_pFileLoad[nCntField].size(); nCntBlock++)
		{
			if (!m_Dvec_pFileLoad[nCntField][nCntBlock].bUse) continue;
			vec_Block.emplace_back(
				CFieldblock::Create(D3DXVECTOR3(nCntBlock * 100.0f, 0.0f, nCntField * 100.0f), 2));
		}
		m_Dvec_pFieldBlock.emplace_back(vec_Block);
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnect_fieldblock::Uninit(void)
{
	// フィールドループ
	for (size_t nCntField = 0; nCntField < m_Dvec_pFieldBlock.size(); nCntField++)
	{
		// ブロックのループ
		for (size_t nCntBlock = 0; nCntBlock < m_Dvec_pFieldBlock[nCntField].size(); nCntBlock++)
		{
			m_Dvec_pFieldBlock[nCntField][nCntBlock] = NULL;
		}
		m_Dvec_pFieldBlock[nCntField].clear();
		m_Dvec_pFieldBlock[nCntField].shrink_to_fit();
	}
	m_Dvec_pFieldBlock.clear();
	m_Dvec_pFieldBlock.shrink_to_fit();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnect_fieldblock::Update(void)
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnect_fieldblock::Draw(void)
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たった後の処理
//	nObjType	: オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnect_fieldblock::Scene_MyCollision(
	int const & nObjType,
	CScene * pScene
)
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 相手に当てられた後の処理
//	nObjType	: オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnect_fieldblock::Scene_OpponentCollision(int const & nObjType, CScene * pScene)
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 結合フィールドブロック全ソースの読み込み
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CConnect_fieldblock::Load(void)
{
	// CSVファイルの読み込み処理
	// 変数宣言
	LPDIRECT3DDEVICE9 pDevice =					// デバイスの取得
		CManager::GetRenderer()->GetDevice();
	// ファイルの中身格納用
	std::vector<std::vector<std::string>> vsvec_Contens;
	// ファイルの中身を取得する
	vsvec_Contens = CCalculation::FileContens(CONNECT_FIELDBLOCK_FILE, ',');
	// 行ごとに回す
	for (size_t nCntLine = 0; nCntLine < vsvec_Contens.size(); nCntLine++)
	{
		std::vector<LOAD> vec_Load;					// 読み込み情報
		// 項目ごとに回す
		for (size_t nCntItem = 0; nCntItem < vsvec_Contens.at(nCntLine).size(); nCntItem++)
		{
			LOAD load;
			load.nFailId = stoi(vsvec_Contens.at(nCntLine).at(nCntItem));
			if (load.nFailId == 0)
			{
				load.bUse = false;
			}
			else
			{
				load.bUse = true;
			}
			vec_Load.emplace_back(load);
		}
		m_Dvec_pFileLoad.emplace_back(vec_Load);
		vec_Load.clear();
		vec_Load.shrink_to_fit();
	}
	// std::vectorの多重配列開放
	std::vector<std::vector<std::string>>().swap(vsvec_Contens);
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだ情報を破棄処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnect_fieldblock::UnLoad(void)
{
	// フィールドループ
	for (size_t nCntField = 0; nCntField < m_Dvec_pFileLoad.size(); nCntField++)
	{
		m_Dvec_pFileLoad[nCntField].clear();
		m_Dvec_pFileLoad[nCntField].shrink_to_fit();
	}
	// 読み込んだ情報の開放
	m_Dvec_pFileLoad.clear();
	m_Dvec_pFileLoad.shrink_to_fit();
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(シーン管理)
//	type		: タイプ情報
//	layer		: レイヤー
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CConnect_fieldblock * CConnect_fieldblock::Create(
	TYPE			const & type,									// タイプ情報
	CScene::LAYER	const & layer									// レイヤー
)
{
	// 変数宣言
	CConnect_fieldblock * pConnect_fieldblock;		// 結合フィールドブロック
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pConnect_fieldblock = new CConnect_fieldblock();
	// 設定
	// シーン管理設定
	pConnect_fieldblock->ManageSetting(layer);
	// 初期化処理
	pConnect_fieldblock->Init();
	// 生成したオブジェクトを返す
	return pConnect_fieldblock;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(個人管理)
//	type		: タイプ情報
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CConnect_fieldblock * CConnect_fieldblock::Create_Self(
	TYPE	const & type									// タイプ情報
)
{
	// 変数宣言
	CConnect_fieldblock * pConnect_fieldblock;		// 結合フィールドブロック
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pConnect_fieldblock = new CConnect_fieldblock;
	// 初期化処理
	pConnect_fieldblock->Init();
	// 生成したオブジェクトを返す
	return pConnect_fieldblock;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// unique_ptr作成(個人管理unique)
// ※戻り値はstd::moveで受け取る
//	type		: タイプ情報
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::unique_ptr<CConnect_fieldblock> CConnect_fieldblock::Creat_Unique(
	TYPE	const & type									// タイプ情報
)
{
	// 変数宣言
	std::unique_ptr<CConnect_fieldblock> pConnect_fieldblock(new CConnect_fieldblock);		// 結合フィールドブロック
	// 初期化処理
	pConnect_fieldblock->Init();
	// 生成したオブジェクトを返す
	return pConnect_fieldblock;
}

#ifdef _DEBUG
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnect_fieldblock::Debug(void)
{

}
#endif // _DEBUG

