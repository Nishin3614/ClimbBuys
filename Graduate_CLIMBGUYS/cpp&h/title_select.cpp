// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// ポーズ用ui処理の説明[title_select.cpp]
// Author : Nishiyama Koki
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* 描画 */
#include "title_select.h"
#include "fade.h"
#include "ui.h"
#include "camera.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// グローバル変数
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 選択
int CTitle_select::m_nSelect = 0;

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CTitle_select::CTitle_select()
{
	m_nSelect = 0;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CTitle_select::~CTitle_select()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTitle_select::Init(void)
{
	// 背景の生成
	m_BgUi = std::move(CUi::LoadCreate_Self(CUi::UITYPE_TITLEUI_SELECT_BG));
	// 選択UIの生成
	m_uni_SelectUi = std::move(C2DPresents::Create_Unique(
		CScene_TWO::OFFSET_TYPE_CENTER,
		D3DVECTOR3_ZERO,
		{ 360.0f,100.0f },
		67,
		0.0f,
		{ 1.0f,0.0f,0.0f,1.0f }
	));
	// フェードインの色指定設定
	m_uni_SelectUi->SetFadeIn(
	{ 1.0f,1.0f,1.0f,0.0f },
	{ 1.0f,1.0f,1.0f,1.0f },
		0);
	// アニメーション開始時間
	m_uni_SelectUi->SetFadeIn_StarAnim(30);
	// アニメーション開始時間
	m_uni_SelectUi->Start_FadeIn();
	// UIの生成
	m_Ui = std::move(CUi::LoadCreate_Self(
		CUi::UITYPE_TITLEUI_SELECT
	));
	// 選択UIがNULLではないなら
	// ->選択UIの位置更新
	if (m_uni_SelectUi != NULL)
	{
		m_uni_SelectUi->SetPosition(m_Ui[m_nSelect]->GetScene_Two()->GetPosition());
		m_uni_SelectUi->Set_Vtx_Pos();
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTitle_select::Uninit(void)
{
	// 背景の終了処理
	for (int nCntUi = 0; nCntUi < (signed)m_BgUi.size(); nCntUi++)
	{
		m_BgUi[nCntUi]->Uninit();
	}
	// 選択UIの終了処理
	if (m_uni_SelectUi != NULL)
	{
		m_uni_SelectUi->Uninit();
	}
	// PauseUIの終了処理
	for (int nCntUi = 0; nCntUi < (signed)m_Ui.size(); nCntUi++)
	{
		m_Ui[nCntUi]->Uninit();
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTitle_select::Update(void)
{
	/* ジョイパッド */
	if (CManager::GetJoy() != NULL)
	{
		// スティックの下方向に傾けたとき |
		// 下矢印が押されたとき |
		// ->次の項目へ
		if (CManager::GetJoy()->GetBoolStickLeft(0, CJoypad::DIRECTION_DOWN) ||
			CManager::GetJoy()->GetTrigger(0, CJoypad::KEY_DOWN))
		{
			m_nSelect++;
			// 上限超えたら
			if (m_nSelect >= TITLE_SELECT_MAX)
			{
				m_nSelect = TITLE_SELECT_GAME;
			}
			// 選択UIの位置更新
			m_uni_SelectUi->SetPosition(m_Ui[m_nSelect]->GetScene_Two()->GetPosition());
			m_uni_SelectUi->Set_Vtx_Pos();
			// カーソル音
			//CManager::GetSound()->PlaySound(CSound::LABEL_SE_CURSOL);
		}
		// スティックの上方向に傾けたとき |
		// 上矢印が押されたとき |
		// ->前の項目へ
		else if (CManager::GetJoy()->GetBoolStickLeft(0, CJoypad::DIRECTION_UP) ||
			CManager::GetJoy()->GetTrigger(0, CJoypad::KEY_UP))
		{
			m_nSelect--;
			// 下限超えたら
			if (m_nSelect < TITLE_SELECT_GAME)
			{
				m_nSelect = TITLE_SELECT_MAX - 1;
			}
			// 選択UIの位置更新
			m_uni_SelectUi->SetPosition(m_Ui[m_nSelect]->GetScene_Two()->GetPosition());
			m_uni_SelectUi->Set_Vtx_Pos();

			// カーソル音
			//CManager::GetSound()->PlaySound(CSound::LABEL_SE_CURSOL);
		}
		// Bボタンを押したら |
		// ->選択している項目の処理
		if (CManager::GetJoy()->GetTrigger(0, CJoypad::KEY_B))
		{
			Select();
		}
	}
	/* キーボード */
	// 下矢印を押したら |
	// Sボタンを押したら |
	// ->次の項目へ
	if (CManager::GetKeyboard()->GetKeyboardTrigger(DIK_DOWN) ||
		CManager::GetKeyboard()->GetKeyboardTrigger(DIK_S))
	{
		m_nSelect++;
		// 上限超えたら
		if (m_nSelect >= TITLE_SELECT_MAX)
		{
			m_nSelect = TITLE_SELECT_GAME;
		}
		// 選択UIの位置更新
		m_uni_SelectUi->SetPosition(m_Ui[m_nSelect]->GetScene_Two()->GetPosition());
		m_uni_SelectUi->Set_Vtx_Pos();
		// カーソル音
		//CManager::GetSound()->PlaySound(CSound::LABEL_SE_CURSOL);
	}
	// 上矢印を押したら |
	// Wボタンを押したら |
	// ->前の項目へ
	else if (CManager::GetKeyboard()->GetKeyboardTrigger(DIK_UP) ||
		CManager::GetKeyboard()->GetKeyboardTrigger(DIK_W))
	{
		m_nSelect--;
		// 下限超えたら
		if (m_nSelect < TITLE_SELECT_GAME)
		{
			m_nSelect = TITLE_SELECT_MAX - 1;
		}
		// 選択UIの位置更新
		m_uni_SelectUi->SetPosition(m_Ui[m_nSelect]->GetScene_Two()->GetPosition());
		m_uni_SelectUi->Set_Vtx_Pos();
		// カーソル音
		//CManager::GetSound()->PlaySound(CSound::LABEL_SE_CURSOL);
	}
	// エンター押したら |
	// ->選択している項目の処理
	if (CManager::GetKeyboard()->GetKeyboardTrigger(DIK_RETURN))
	{
		Select();
	}

	/* 各UIの更新処理 */
	// 背景の更新処理
	for (int nCntUi = 0; nCntUi < (signed)m_BgUi.size(); nCntUi++)
	{
		m_BgUi[nCntUi]->Update();
	}
	// 選択UIの更新処理
	if (m_uni_SelectUi != NULL)
	{
		m_uni_SelectUi->Update();
	}
	// UIの更新処理
	for (int nCntUi = 0; nCntUi < (signed)m_Ui.size(); nCntUi++)
	{
		m_Ui[nCntUi]->Update();
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTitle_select::Draw(void)
{
	// 背景の更新処理
	for (int nCntUi = 0; nCntUi < (signed)m_BgUi.size(); nCntUi++)
	{
		m_BgUi[nCntUi]->Draw();
	}
	// 選択UIの描画処理
	if (m_uni_SelectUi != NULL)
	{
		m_uni_SelectUi->Draw();
	}
	// UIの描画処理
	for (int nCntUi = 0; nCntUi < (signed)m_Ui.size(); nCntUi++)
	{
		m_Ui[nCntUi]->Draw();
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 全体の初期化
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTitle_select::SelfInit(void)
{
	// 選択初期化
	m_nSelect = 0;
}

#ifdef _DEBUG
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTitle_select::Debug(void)
{
}
#endif // _DEBUG

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込み処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CTitle_select::Load(void)
{
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだ情報を破棄
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTitle_select::UnLoad(void)
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理(個人管理)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::unique_ptr<CTitle_select> CTitle_select::Create_Self(void)
{
	// 変数宣言
	std::unique_ptr<CTitle_select> pTitle_select(new CTitle_select);
	// 初期化処理
	pTitle_select->Init();
	// 生成したオブジェクトを返す
	return pTitle_select;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理(シーン管理)
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CTitle_select * CTitle_select::Create(void)
{
	// 変数宣言
	CTitle_select * pTitle_select = new CTitle_select;
	// 初期化処理
	pTitle_select->Init();
	// シーン管理
	pTitle_select->ManageSetting(CScene::LAYER_UI);
	// 生成したオブジェクトを返す
	return pTitle_select;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 選択処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CTitle_select::Select(void)
{
	// ゲームを始める
	if (m_nSelect == TITLE_SELECT_GAME)
	{
		// 画面遷移の状態が遷移していない状態だったら
		if (CManager::GetFade()->GetFade() == CFade::FADE_NONE)
		{
			// フェード設定
			CManager::GetFade()->SetFade(CManager::MODE_GAME);
			// 選択を初期化
			m_nSelect = 0;
		}
	}
	// チュートリアルを始める
	else if (m_nSelect == TITLE_SELECT_TUTORIAL)
	{
		// 画面遷移の状態が遷移していない状態だったら
		if (CManager::GetFade()->GetFade() == CFade::FADE_NONE)
		{
			// エンター音
			//CManager::GetSound()->PlaySound(CSound::LABEL_SE_ENTER);
			// フェード設定
			CManager::GetFade()->SetFade(CManager::MODE_TUTORIAL);
			// 選択を初期化
			m_nSelect = 0;
		}
	}

	// ゲーム終了
	else if (m_nSelect == TITLE_SELECT_GAMEEND)
	{
		SetDestWind(true);
	}
}
