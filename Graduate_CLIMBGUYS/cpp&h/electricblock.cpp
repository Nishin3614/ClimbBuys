// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 混乱ブロック処理 [electricblock.cpp]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "electricblock.h"
#include "debugproc.h"
#include "game.h"
#include "3Dparticle.h"
#include "sound.h"
#include "player.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// オーバーローバーコンストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CElectricblock::CElectricblock() : CBaseblock::CBaseblock()
{
	m_bElect = false;
	m_bPlayerPush = false;
	m_PushPlayer = PLAYER_TAG::NONE;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CElectricblock::~CElectricblock()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CElectricblock::Init()
{
	// ブロックタイプの設定
	CBaseblock::SetType(BLOCKTYPE_ELECTRIC);	// 電気のブロックタイプ
	// 落ちる設定
	CBaseblock::SetFall(true);
	// ベースブロック初期化処理
	CBaseblock::Init();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CElectricblock::Uninit(void)
{
	CBaseblock::Uninit();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CElectricblock::Update(void)
{
	CBaseblock::Update();
	// プレイヤーに押し出されている状態
	if (!m_bPlayerPush &&
		CBaseblock::GetPushAfter().bPushState)
	{
		m_bPlayerPush = true;
	}
	else if (m_bPlayerPush &&
		!CBaseblock::GetPushAfter().bPushState)
	{
		m_bElect = true;
	}
	// Electric状態なら
	if (m_bElect)
	{
		// 押す前のブロックの上にあったブロックを落とさせる
		CBaseblock::FallBlock_Grid(CBaseblock::GetGrid());
		// 押したブロックの現在までいた行列の高さ情報を更新
		CBaseblock::SetHeight(CBaseblock::GetGrid() + CBaseblock::GRID(0, -1, 0));
		// パーティクル生成
		C3DParticle::Create(
			C3DParticle::PARTICLE_ID_EXPLOSION,
			this->GetPos()
		);
		// 爆発音
		CManager::GetSound()->PlaySound(CSound::LABEL_SE_EXPLOSION);
		// プレイヤーに電気ブロック使用時の状態を付与する
		CPlayer::ElectricUse(m_PushPlayer);
		// シャドウのリリース処理
		ShadowRelease();
		// リリース
		Release();
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CElectricblock::Draw(void)
{
	CBaseblock::Draw();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たった後の処理
//	nObjType	: 相手オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CElectricblock::Scene_MyCollision(
	int const & nObjType,
	CScene * pScene
)
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 相手に当てられた後の処理
//	nObjType	: 相手オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CElectricblock::Scene_OpponentCollision(int const & nObjType, CScene * pScene)
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たった後の判定
//	Obj		: オブジェタイプ
//	pScene	: シーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CElectricblock::HitCollision(
	COLLISIONDIRECTION const &Direct,	// 前後左右上下
	CScene::OBJ const & Obj,			// オブジェタイプ
	CScene * pScene						// シーン情報
)
{
	// オブジェタイプがブロックなら
	if (CScene::OBJ_BLOCK == Obj)
	{
		if (Direct == COLLISIONDIRECTION::DOWN)
		{
			// シーン情報がNULLなら
			// ->関数を抜ける
			if (pScene == NULL) return;
			if (!CBaseblock::GetFall()) return;
			// シーン情報の代入
			CBaseblock * pBaseBlock = (CBaseblock *)pScene;
			// 相手の落ちる状態がtrueなら
			// ->関数を抜ける
			if (pBaseBlock->GetFall()) return;
			// 変数宣言
			CBaseblock::GRID MyGrid = CBaseblock::GetGrid();	// 自分の行列高
			CBaseblock::GRID OppGrid = pBaseBlock->GetGrid();	// 相手の行列高
			// 同じ行列ではないなら
			// ->関数を抜ける
			if (!(MyGrid.nColumn == OppGrid.nColumn &&
				MyGrid.nLine == OppGrid.nLine)) return;
			// 変数宣言
			int nHeight = CBaseblock::GetHeight(			// 高さ
				MyGrid.nColumn,
				MyGrid.nLine) + 1;
			// 高さを行列高に代入
			MyGrid.nHeight = nHeight;
			// 高さの設定
			CBaseblock::SetHeight(
				MyGrid.nColumn,
				MyGrid.nLine,
				MyGrid.nHeight
			);
			// 現在の行列高の設定
			CBaseblock::SetGrid(MyGrid);
			// 位置設定
			CBaseblock::SetPos(MyGrid.GetPos(m_fSizeRange));
			// 落ちている状態設定
			CBaseblock::SetFall(false);
		}
		// 当たった方向が上なら
		else if (Direct == COLLISIONDIRECTION::UP)
		{

		}
		// 当たった方向がそれ以外なら
		else
		{

		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 混乱ブロック全ソースの読み込み
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CElectricblock::Load(void)
{
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだ情報を破棄処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CElectricblock::UnLoad(void)
{

}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(シーン管理)
//	pos			: 位置
//	nModelId	: モデル番号
//	pCol		: 色情報
//	layer		: レイヤー
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CElectricblock * CElectricblock::Create(
	int				const & nModelId,	// モデル番号
	GRID			const & Grid,		// 行列高さ番号
	D3DXCOLOR		* pCol,				// 色
	float			const & fGravity,	// 重力
	CScene::LAYER	const & layer		// レイヤー
)
{
	// 変数宣言
	CElectricblock * pElectricblock;		// シーン2Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pElectricblock = new CElectricblock();
	// 設定
	// シーン管理設定
	pElectricblock->ManageSetting(layer);
	pElectricblock->SetGrid(Grid);			// 行列高さ
	pElectricblock->SetPos(					// 位置
		D3DXVECTOR3(Grid.nColumn * m_fSizeRange, Grid.nHeight * m_fSizeRange, Grid.nLine * m_fSizeRange));
	pElectricblock->SetGravity(fGravity);		// 重力
	pElectricblock->SetModelId(nModelId);		// モデル番号
	// 色がNULLではないなら
	if (pCol != NULL)
	{
		// モデルの色を変える
		pElectricblock->SetModelColor(*pCol);
	}
	// 初期化処理
	pElectricblock->Init();
	// 生成したオブジェクトを返す
	return pElectricblock;
	D3DXVECTOR3;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(個人管理)
//	pos			: 位置
//	nModelId	: モデル番号
//	pCol		: 色情報
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CElectricblock * CElectricblock::Create_Self(
	int				const & nModelId,								// モデル番号
	GRID			const & Grid,									// 行列高さ番号
	D3DXCOLOR		* pCol											// 色
)
{
	// 変数宣言
	CElectricblock * pElectricblock;		// シーン2Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pElectricblock = new CElectricblock;
	// 設定
	pElectricblock->SetGrid(Grid);			// 行列高さ
	pElectricblock->SetPos(					// 位置
		D3DXVECTOR3(Grid.nColumn * m_fSizeRange, Grid.nHeight * m_fSizeRange, Grid.nLine * m_fSizeRange));
	pElectricblock->SetModelId(nModelId);		// モデル番号
	// 色がNULLではないなら
	if (pCol != NULL)
	{
		// モデルの色を変える
		pElectricblock->SetModelColor(*pCol);
	}

	// 初期化処理
	pElectricblock->Init();
	// 生成したオブジェクトを返す
	return pElectricblock;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// unique_ptr作成(個人管理unique)
// ※戻り値はstd::moveで受け取る
//	pos			: 位置
//	nModelId	: モデル番号
//	pCol		: 色情報
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::unique_ptr<CElectricblock> CElectricblock::Creat_Unique(
	int				const & nModelId,								// モデル番号
	GRID			const & Grid,									// 行列高さ番号
	D3DXCOLOR		* pCol											// 色
)
{
	// 変数宣言
	std::unique_ptr<CElectricblock> pElectricblock(new CElectricblock);		// シーン2Dクラス
	// 設定
	pElectricblock->SetGrid(Grid);			// 行列高さ
	pElectricblock->SetPos(					// 位置
		D3DXVECTOR3(Grid.nColumn * m_fSizeRange, Grid.nHeight * m_fSizeRange, Grid.nLine * m_fSizeRange));
	pElectricblock->SetModelId(nModelId);		// モデル番号
	// 色がNULLではないなら
	if (pCol != NULL)
	{
		// モデルの色を変える
		pElectricblock->SetModelColor(*pCol);
	}
	// 初期化処理
	pElectricblock->Init();
	// 生成したオブジェクトを返す
	return pElectricblock;
}


#ifdef _DEBUG
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CElectricblock::Debug(void)
{
	/*
	// 落ちる状態でなければ
	// 関数を抜ける
	if (CBaseblock::GetFall())
	{
		CDebugproc::Print("NormalBlock::Fall = true\n");
	}
	else
	{
		CDebugproc::Print("NormalBlock::Fall = false\n");
	}
	CDebugproc::Print("NormalBlock::Pos(%.2f,%.2f,%.2f)\n",CScene_X::GetPos().x, CScene_X::GetPos().y, CScene_X::GetPos().z);
	*/
}
#endif // _DEBUG

