// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// ゲームUI[gameUI.cpp]
// Author : Yoshiki Sato
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "gameUI.h"
#include "basemode.h"
#include "debugproc.h"
#include "scene_two.h"
#include "number.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
#define GAME_UI_NAME_TAG_POS					(D3DXVECTOR3((250.0f + 260.0f * nCnt), (680.0f), 0.0f))		// 枠の位置
#define GAME_UI_NAME_TAG_SIZE					(D3DXVECTOR2(150.0f, 60.0f))	// 枠のサイズ

#define GAME_UI_TIMER_SIZE						(D3DXVECTOR2(300.0f, 300.0f))		// タイマーのサイズ
#define GAME_UI_TIMER_COLOR						(D3DXCOLOR(0.0f, 0.0f, 0.0f, 1.0f))	// タイマーの色
#define TIMER_INIT_NUM							(3)									// タイマーの初期値

#define GAME_UI_START_SIZE						(D3DXVECTOR2(500.0f, 250.0f))		// 始めの合図のサイズ
#define GAME_UI_FINISH_SIZE						(D3DXVECTOR2(300.0f, 150.0f))		// 終了の合図のサイズ

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// イニシャライザコンストラクタ
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
CGameUI::CGameUI()
{
	// 初期化
	for (int nCnt = 0; nCnt < (int)GAME_UI::UI_MAX; nCnt++)
	{
		m_pScene2D[nCnt]	= nullptr;			// シーン2D
	}
	m_pStartCount			= nullptr;			// スタートカウント
	m_nCntTimer				= 0;				// タイマーカウント
	m_nTimerNum				= TIMER_INIT_NUM;	// タイマーのナンバー
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
CGameUI::~CGameUI()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGameUI::Init(void)
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGameUI::Uninit(void)
{
	for (int nCnt = 0; nCnt < (int)GAME_UI::UI_MAX; nCnt++)
	{
		if (m_pScene2D[nCnt])
		{
			m_pScene2D[nCnt] = nullptr;			// シーン2D
		}
	}
}
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGameUI::Update(void)
{
	// スタートタイマーの処理
	StartTimer();

	for (int nCnt = 0; nCnt < (int)GAME_UI::UI_MAX; nCnt++)
	{
		if (m_pScene2D[nCnt])
		{
			// 更新
			m_pScene2D[nCnt]->Update();
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGameUI::Draw(void)
{
	for (int nCnt = 0; nCnt < (int)GAME_UI::UI_MAX; nCnt++)
	{
		if (m_pScene2D[nCnt])
		{
			// 描画
			m_pScene2D[nCnt]->Draw();
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
CGameUI * CGameUI::Create(void)
{
	// 変数宣言
	CGameUI * pGameUI;		// シーン2Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pGameUI = new CGameUI();

	// シーン2Dの生成
	for (int nCnt = 0; nCnt < (int)GAME_UI::UI_MAX; nCnt++)
	{
		pGameUI->m_pScene2D[nCnt] = CScene_TWO::Create(CScene_TWO::OFFSET_TYPE_CENTER, SCREEN_CENTER_POS, GAME_UI_START_SIZE, (CTexture_manager::TYPE_GAME_UI_START + nCnt));
		// 透明にする
		pGameUI->m_pScene2D[nCnt]->SetCol(D3DXCOLOR_CA(1.0f, 0.0f));
		pGameUI->m_pScene2D[nCnt]->Set_Vtx_Col();
	}
	// スタートカウントの生成
	pGameUI->m_pStartCount = CNumber::Create(TIMER_INIT_NUM, SCREEN_CENTER_POS, CTexture_manager::TYPE_UI_NUMBER, GAME_UI_TIMER_SIZE);
	pGameUI->m_pStartCount->SetCol(GAME_UI_TIMER_COLOR);
	pGameUI->m_pStartCount->Set_Vtx_Col();

	// 初期化処理
	pGameUI->Init();

	// 生成したオブジェクトを返す
	return pGameUI;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込み処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CGameUI::Load(void)
{
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// unload処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGameUI::UnLoad(void)
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// スタートタイマーの処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGameUI::StartTimer()
{
	// カウントアップ
	m_nCntTimer++;

	// 1秒ごとにカウントダウン
	if (m_nCntTimer % 60 == 0)
	{
		m_nTimerNum--;

		// スタートカウントのNULLチェック
		if (m_pStartCount)
		{
			// カウントダウン
			if (m_nTimerNum > 0)
			{
				// ナンバーの設定
				m_pStartCount->SetNum(m_nTimerNum);
			}
			// ナンバーを削除し、スタートの合図を出す
			else
			{
				// ナンバーの削除
				m_pStartCount->Release();
				m_pStartCount = nullptr;

				// スタートの合図を出す
				m_pScene2D[(int)GAME_UI::START]->SetCol(D3DXCOLOR_CA(1.0f, 1.0f));
				m_pScene2D[(int)GAME_UI::START]->Set_Vtx_Col();
			}
		}
		// スタートの合図を消す
		if (m_nTimerNum < 0)
		{
			if (m_pScene2D[(int)GAME_UI::START])
			{
				// スタートの合図の削除
				m_pScene2D[(int)GAME_UI::START]->Release();
				m_pScene2D[(int)GAME_UI::START] = nullptr;
			}
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了の合図
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CGameUI::FinishSignal()
{
	if (m_pScene2D[(int)GAME_UI::FINISH])
	{
		// 終了の合図を出す
		m_pScene2D[(int)GAME_UI::FINISH]->SetCol(D3DXCOLOR_CA(1.0f, 1.0f));
		m_pScene2D[(int)GAME_UI::FINISH]->Set_Vtx_Col();
	}
}