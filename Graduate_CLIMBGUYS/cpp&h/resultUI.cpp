// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// リザルトUI[resultUI.cpp]
// Author : Yoshiki Sato
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "resultUI.h"
#include "basemode.h"
#include "debugproc.h"
#include "scene_two.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
#define RESULT_UI_FRAME_POS					(D3DXVECTOR3((160.0f + 320.0f * nCnt), (1080.0f + 210.0f * nCnt), 0.0f))		// リザルトUIの枠の位置
#define RESULT_UI_FRAME_SIZE				(D3DXVECTOR2(320.0f, SCREEN_HEIGHT))	// リザルトUIの枠のサイズ
#define RESULT_UI_FRAME_MOVE				(D3DXVECTOR3(0.0f, -70.0f, 0.0f))		// リザルトUIの枠の移動量
#define RESULT_UI_FRAME_MOVE_STOP_POS_Y		(360.0f)								// リザルトUIの枠の移動が止まる位置Y

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// イニシャライザコンストラクタ
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
CResultUI::CResultUI()
{
	// 初期化
	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		m_pScene2D[nCnt] = nullptr;
	}
	m_move			= D3DVECTOR3_ZERO;		// 移動量
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
CResultUI::~CResultUI()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CResultUI::Init(void)
{
	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		if (m_pScene2D[nCnt])
		{
			// リザルトUIの枠に共通する設定
			if (nCnt <= (int)RESULT_UI::FRAME_4P)
			{
				// 位置の設定
				m_pScene2D[nCnt]->SetPosition(RESULT_UI_FRAME_POS);
				// サイズの設定
				m_pScene2D[nCnt]->SetSize(RESULT_UI_FRAME_SIZE);
			}

			// 初期化
			m_pScene2D[nCnt]->Init();
		}
	}
	m_move = RESULT_UI_FRAME_MOVE;	// 移動量
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CResultUI::Uninit(void)
{
	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		if (m_pScene2D[nCnt])
		{
			// 終了
			m_pScene2D[nCnt] = nullptr;
		}
	}
}
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CResultUI::Update(void)
{
	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		if (m_pScene2D[nCnt])
		{
			// 位置
			D3DXVECTOR3 pos = D3DVECTOR3_ZERO;

			// 位置の取得
			pos = m_pScene2D[nCnt]->GetPosition();

			// 移動
			pos.y += m_move.y;

			// 移動を止める
			if (pos.y <= RESULT_UI_FRAME_MOVE_STOP_POS_Y)
			{
				pos.y = RESULT_UI_FRAME_MOVE_STOP_POS_Y;
			}

			// 位置の設定
			m_pScene2D[nCnt]->SetPosition(pos);
			m_pScene2D[nCnt]->Set_Vtx_Pos();
			// 更新
			m_pScene2D[nCnt]->Update();
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CResultUI::Draw(void)
{
	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		if (m_pScene2D[nCnt])
		{
			// 描画
			m_pScene2D[nCnt]->Draw();
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
CResultUI * CResultUI::Create(void)
{
	// 変数宣言
	CResultUI * pResultUI;		// シーン2Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pResultUI = new CResultUI();

	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		// シーン2Dの生成
		pResultUI->m_pScene2D[nCnt] = CScene_TWO::Create(CScene_TWO::OFFSET_TYPE_CENTER, D3DVECTOR3_ZERO, D3DVECTOR2_ZERO, (CTexture_manager::TYPE_RESULT_UI_FRAME_1P + nCnt));
	}
	// 初期化処理
	pResultUI->Init();

	// 生成したオブジェクトを返す
	return pResultUI;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込み処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CResultUI::Load(void)
{
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// unload処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CResultUI::UnLoad(void)
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// リザルトUIの移動処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CResultUI::MoveResultUI(void)
{
}