// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// シーン処理の説明[loadscreen.cpp]
// Author : Koki Nishiyama
//
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "loadscreen.h"
#include "scene_two.h"

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define LOADSCREEN_ANIM		(0.2f)	// ロードスクリーンアニメーション値
#define LOADSCREEN_SIZE_X	(62.5f)	// xのサイズ

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// イニシャライザコンストラクタ
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CLoadScreen::CLoadScreen()
{
	// 変数の初期化
	for (int nCntScene = 0; nCntScene < UITYPE_MAX; nCntScene++)
	{
		m_paScene_two[nCntScene] = NULL;
	}
	m_nCntLoad = 0;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CLoadScreen::~CLoadScreen()
{
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CLoadScreen::Init(void)
{
	for (int nCntScene = 0; nCntScene < UITYPE_MAX; nCntScene++)
	{
		m_paScene_two[nCntScene] = CScene_TWO::Create_Self(
			CScene_TWO::OFFSET_TYPE_CENTER,
			D3DXVECTOR3(SCREEN_WIDTH * 0.5f, SCREEN_HEIGHT * 0.5f, 0.0f),
			D3DXVECTOR2(SCREEN_WIDTH * 0.5f, SCREEN_HEIGHT * 0.5f),
			0
		);
	}
	// 背景の設定
	m_paScene_two[UITYPE_BG]->BindTexture(-1);
	m_paScene_two[UITYPE_BG]->SetCol(D3DXCOLOR(0.0f, 0.0f, 0.0f, 1.0f));
	m_paScene_two[UITYPE_BG]->SetSize(D3DXVECTOR2(SCREEN_WIDTH, SCREEN_HEIGHT));
	m_paScene_two[UITYPE_BG]->Set_Vtx_Col();
	m_paScene_two[UITYPE_BG]->Set_Vtx_Pos();
	// ナウローディングの設定
	m_paScene_two[UITYPE_LOADING]->BindTexture(85);
	m_paScene_two[UITYPE_LOADING]->SetSize(D3DXVECTOR2(700.0f,200.0f));
	m_paScene_two[UITYPE_LOADING]->Set_Vtx_Pos();
	// 風船の設定
	m_paScene_two[UITYPE_BALLOON]->BindTexture(84);
	m_paScene_two[UITYPE_BALLOON]->SetPosition(D3DXVECTOR3(300.0f, 500.0f,0.0f));
	m_paScene_two[UITYPE_BALLOON]->SetSize(D3DXVECTOR2(LOADSCREEN_SIZE_X * m_nCntLoad + LOADSCREEN_SIZE_X, 100.0f));
	m_paScene_two[UITYPE_BALLOON]->Set_Vtx_Tex(D3DXVECTOR2(0.0f, 0.0f), D3DXVECTOR2(m_nCntLoad * LOADSCREEN_ANIM + LOADSCREEN_ANIM, 1.0f));
	m_paScene_two[UITYPE_BALLOON]->SetOffset(CScene_TWO::OFFSET_TYPE_LEFT);
	m_paScene_two[UITYPE_BALLOON]->Set_Vtx_Pos(CScene_TWO::OFFSET_TYPE_LEFT);
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CLoadScreen::Uninit(void)
{
	for (int nCntScene = 0; nCntScene < UITYPE_MAX; nCntScene++)
	{
		m_paScene_two[nCntScene]->Uninit();
		delete m_paScene_two[nCntScene];
		m_paScene_two[nCntScene] = NULL;
	}
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CLoadScreen::Update(void)
{
	for (int nCntScene = 0; nCntScene < UITYPE_MAX; nCntScene++)
	{
		m_paScene_two[nCntScene]->Update();
	}
	m_paScene_two[UITYPE_BALLOON]->SetSize(D3DXVECTOR2(LOADSCREEN_SIZE_X * m_nCntLoad + LOADSCREEN_SIZE_X, 100.0f));
	m_paScene_two[UITYPE_BALLOON]->Set_Vtx_Tex(D3DXVECTOR2(0.0f, 0.0f), D3DXVECTOR2(m_nCntLoad * LOADSCREEN_ANIM + LOADSCREEN_ANIM, 1.0f));
	m_paScene_two[UITYPE_BALLOON]->Set_Vtx_Pos(CScene_TWO::OFFSET_TYPE_LEFT);
	// カウントロードアップ
	m_nCntLoad++;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CLoadScreen::Draw(void)
{
	for (int nCntScene = 0; nCntScene < UITYPE_MAX; nCntScene++)
	{
		m_paScene_two[nCntScene]->Draw();
	}
}

#ifdef _DEBUG
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CLoadScreen::Debug(void)
{
	for (int nCntScene = 0; nCntScene < UITYPE_MAX; nCntScene++)
	{
		m_paScene_two[nCntScene]->Debug();
	}
}
#endif // _DEBUG

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(シーン継承あり)処理
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CLoadScreen * CLoadScreen::Create(void)
{
	// 変数宣言
	CLoadScreen * pLoadScreen;		// シーン2Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pLoadScreen = new CLoadScreen();
	// 初期化処理
	pLoadScreen->Init();
	// 生成したオブジェクトを返す
	return pLoadScreen;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 変数初期化処理
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CLoadScreen::VariableInit(void)
{
	m_nCntLoad = 0;
}

/*
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(シーン継承なし、std::unique_ptr)処理
// ※戻り値はstd::moveで受け取る
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::unique_ptr<CLoadScreen> CLoadScreen::Creat_Unique(void)
{
	// 変数宣言
	std::unique_ptr<CLoadScreen> pLoadScreen(new CLoadScreen);		// シーン2Dクラス
										// 初期化処理
	pLoadScreen->Init();
	// 生成したオブジェクトを返す
	return pLoadScreen;
}
*/