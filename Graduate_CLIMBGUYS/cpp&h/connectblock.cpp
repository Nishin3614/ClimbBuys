// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 結合ブロック処理 [connectblock.cpp]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "connectblock.h"
#include "baseblock.h"
#include "normalblock.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// オーバーローバーコンストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CConnectblock::CConnectblock() : CScene::CScene()
{
	m_pos = D3DVECTOR3_ZERO;
	m_move = D3DVECTOR3_ZERO;
	m_col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	m_Shape = SHAPE_RECT;
	// ランダムに色情報を設定
	CCalculation::GetRandomColor(m_col);
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CConnectblock::~CConnectblock()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnectblock::Init()
{
	// ブロック設定
	SetBlockShape();

	for (size_t nCntBlock = 0; nCntBlock < m_vec_pBaseBlock.size(); nCntBlock++)
	{
		m_vec_pBaseBlock[nCntBlock]->SetModelColor(m_col);
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnectblock::Uninit(void)
{
	// NULL代入
	for (size_t nCntBlock = 0; nCntBlock < m_vec_pBaseBlock.size(); nCntBlock++)
	{
		m_vec_pBaseBlock[nCntBlock] = NULL;
	}
	// ベースブロック情報の格納情報開放
	m_vec_pBaseBlock.clear();
	m_vec_pBaseBlock.shrink_to_fit();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnectblock::Update(void)
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ブロックの設定
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnectblock::SetBlockShape(void)
{
	// 形
	switch (m_Shape)
	{
		// 矩形
	case SHAPE_RECT:
		m_vec_pBaseBlock.emplace_back(CNormalblock::Create(2, CBaseblock::GRID(0, 7, 0)));
		m_vec_pBaseBlock.emplace_back(CNormalblock::Create(2, CBaseblock::GRID(0, 8, 0)));
		m_vec_pBaseBlock.emplace_back(CNormalblock::Create(2, CBaseblock::GRID(1,7,0)));
		m_vec_pBaseBlock.emplace_back(CNormalblock::Create(2, CBaseblock::GRID(1,8,0)));
		m_vec_pBaseBlock.emplace_back(CNormalblock::Create(2, CBaseblock::GRID(0,7,1)));
		m_vec_pBaseBlock.emplace_back(CNormalblock::Create(2, CBaseblock::GRID(0,8,1)));
		m_vec_pBaseBlock.emplace_back(CNormalblock::Create(2, CBaseblock::GRID(1, 7, 1)));
		m_vec_pBaseBlock.emplace_back(CNormalblock::Create(2, CBaseblock::GRID(1, 8, 1)));
		break;
	default:
		break;
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnectblock::Draw(void)
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たった後の処理
//	nObjType	: オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnectblock::Scene_MyCollision(
	int const & nObjType,
	CScene * pScene
)
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 相手に当てられた後の処理
//	nObjType	: オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnectblock::Scene_OpponentCollision(int const & nObjType, CScene * pScene)
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 結合ブロック全ソースの読み込み
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CConnectblock::Load(void)
{
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだ情報を破棄処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnectblock::UnLoad(void)
{

}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(シーン管理)
//	pos			: 位置
//	layer		: レイヤー
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CConnectblock * CConnectblock::Create(
	D3DXVECTOR3		const & pos,									// 位置
	SHAPE			const & shape,									// 形情報
	CScene::LAYER	const & layer									// レイヤー
)
{
	// 変数宣言
	CConnectblock * pConnectblock;		// シーン2Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pConnectblock = new CConnectblock();
	// 設定
	// シーン管理設定
	pConnectblock->ManageSetting(layer);
	pConnectblock->m_pos = pos;				// 位置
	// 初期化処理
	pConnectblock->Init();
	// 生成したオブジェクトを返す
	return pConnectblock;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(個人管理)
//	pos			: 位置
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CConnectblock * CConnectblock::Create_Self(
	D3DXVECTOR3		const & pos,									// 位置
	SHAPE			const & shape									// 形情報
)
{
	// 変数宣言
	CConnectblock * pConnectblock;		// シーン2Dクラス
									// メモリの生成(初め->基本クラス,後->派生クラス)
	pConnectblock = new CConnectblock;
	// 設定
	pConnectblock->m_pos = pos;				// 位置
	// 初期化処理
	pConnectblock->Init();
	// 生成したオブジェクトを返す
	return pConnectblock;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// unique_ptr作成(個人管理unique)
// ※戻り値はstd::moveで受け取る
//	pos			: 位置
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::unique_ptr<CConnectblock> CConnectblock::Creat_Unique(
	D3DXVECTOR3		const & pos,									// 位置
	SHAPE			const & shape									// 形情報
)
{
	// 変数宣言
	std::unique_ptr<CConnectblock> pConnectblock(new CConnectblock);		// シーン2Dクラス
	// 設定
	pConnectblock->m_pos = pos;				// 位置
	// 初期化処理
	pConnectblock->Init();
	// 生成したオブジェクトを返す
	return pConnectblock;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(シーン管理)
//	pos	: 位置
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CConnectblock * CConnectblock::Create_Field(
	FIELDTYPE const & fieldtype,
	CScene::LAYER const & layer
)
{

	switch (fieldtype)
	{
	case FIELDTYPE_RECT:

		break;
	default:
		break;
	}
	return nullptr;
}

#ifdef _DEBUG
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CConnectblock::Debug(void)
{

}
#endif // _DEBUG

