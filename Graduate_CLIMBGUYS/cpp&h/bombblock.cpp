// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 爆発ブロック処理 [bombblock.cpp]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "bombblock..h"
#include "debugproc.h"
#include "game.h"
#include "3dparticle.h"
#include "sound.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// オーバーローバーコンストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBombblock::CBombblock() : CBaseblock::CBaseblock()
{
	m_bBomb = false;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBombblock::~CBombblock()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBombblock::Init()
{
	// ブロックタイプの設定
	CBaseblock::SetType(CBaseblock::TYPE::TYPE_BOMB);	// 爆発のブロックタイプ
	// 落ちる設定
	CBaseblock::SetFall(true);
	// ベースブロック初期化処理
	CBaseblock::Init();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBombblock::Uninit(void)
{
	CBaseblock::Uninit();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBombblock::Update(void)
{
	// ベースブロックの更新処理
	CBaseblock::Update();
	// プレイヤーに押し出されている状態
	if (!m_bPlayerPush &&
		CBaseblock::GetPushAfter().bPushState)
	{
		m_bPlayerPush = true;
	}
	else if (m_bPlayerPush &&
		!CBaseblock::GetPushAfter().bPushState)
	{
		m_bBomb = true;
	}
	// やること
	// 爆発状態がtrueなら
	if (m_bBomb)
	{
		// 押す前のブロックの上にあったブロックを落とさせる
		CBaseblock::FallBlock_Grid(CBaseblock::GetGrid());
		// 押したブロックの現在までいた行列の高さ情報を更新
		CBaseblock::SetHeight(CBaseblock::GetGrid() + CBaseblock::GRID(0, -1, 0));
		// 周りのブロックを消す処理
		AroundDelete();
		// リリース
		Release();
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBombblock::Draw(void)
{
	CBaseblock::Draw();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たった後の処理
//	nObjType	: 相手オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBombblock::Scene_MyCollision(
	int const & nObjType,
	CScene * pScene
)
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 相手に当てられた後の処理
//	nObjType	: 相手オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBombblock::Scene_OpponentCollision(int const & nObjType, CScene * pScene)
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たった後の判定
//	Obj		: オブジェタイプ
//	pScene	: シーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBombblock::HitCollision(
	COLLISIONDIRECTION const &Direct,	// 前後左右上下
	CScene::OBJ const & Obj,			// オブジェタイプ
	CScene * pScene						// シーン情報
)
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 爆発ブロック全ソースの読み込み
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CBombblock::Load(void)
{
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだ情報を破棄処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBombblock::UnLoad(void)
{

}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(シーン管理)
//	pos			: 位置
//	nModelId	: モデル番号
//	pCol		: 色情報
//	layer		: レイヤー
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBombblock * CBombblock::Create(
	int				const & nModelId,	// モデル番号
	GRID			const & Grid,		// 行列高さ番号
	D3DXCOLOR		* pCol,				// 色
	float			const & fGravity,	// 重力
	CScene::LAYER	const & layer		// レイヤー
)
{
	// 変数宣言
	CBombblock * pBombblock;		// シーン2Dクラス
										// メモリの生成(初め->基本クラス,後->派生クラス)
	pBombblock = new CBombblock();
	// 設定
	// シーン管理設定
	pBombblock->ManageSetting(layer);
	pBombblock->SetGrid(Grid);			// 行列高さ
	pBombblock->SetPos(					// 位置
		D3DXVECTOR3(Grid.nColumn * m_fSizeRange, Grid.nHeight * m_fSizeRange, Grid.nLine * m_fSizeRange));
	pBombblock->SetGravity(fGravity);		// 重力
	pBombblock->SetModelId(nModelId);		// モデル番号
											// 色がNULLではないなら
	if (pCol != NULL)
	{
		// モデルの色を変える
		pBombblock->SetModelColor(*pCol);
	}
	// 初期化処理
	pBombblock->Init();
	// 生成したオブジェクトを返す
	return pBombblock;
	D3DXVECTOR3;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(個人管理)
//	pos			: 位置
//	nModelId	: モデル番号
//	pCol		: 色情報
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CBombblock * CBombblock::Create_Self(
	int				const & nModelId,								// モデル番号
	GRID			const & Grid,									// 行列高さ番号
	D3DXCOLOR		* pCol											// 色
)
{
	// 変数宣言
	CBombblock * pBombblock;		// シーン2Dクラス
										// メモリの生成(初め->基本クラス,後->派生クラス)
	pBombblock = new CBombblock;
	// 設定
	pBombblock->SetGrid(Grid);			// 行列高さ
	pBombblock->SetPos(					// 位置
		D3DXVECTOR3(Grid.nColumn * m_fSizeRange, Grid.nHeight * m_fSizeRange, Grid.nLine * m_fSizeRange));
	pBombblock->SetModelId(nModelId);		// モデル番号
											// 色がNULLではないなら
	if (pCol != NULL)
	{
		// モデルの色を変える
		pBombblock->SetModelColor(*pCol);
	}

	// 初期化処理
	pBombblock->Init();
	// 生成したオブジェクトを返す
	return pBombblock;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// unique_ptr作成(個人管理unique)
// ※戻り値はstd::moveで受け取る
//	pos			: 位置
//	nModelId	: モデル番号
//	pCol		: 色情報
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::unique_ptr<CBombblock> CBombblock::Creat_Unique(
	int				const & nModelId,								// モデル番号
	GRID			const & Grid,									// 行列高さ番号
	D3DXCOLOR		* pCol											// 色
)
{
	// 変数宣言
	std::unique_ptr<CBombblock> pBombblock(new CBombblock);		// シーン2Dクラス
																		// 設定
	pBombblock->SetGrid(Grid);			// 行列高さ
	pBombblock->SetPos(					// 位置
		D3DXVECTOR3(Grid.nColumn * m_fSizeRange, Grid.nHeight * m_fSizeRange, Grid.nLine * m_fSizeRange));
	pBombblock->SetModelId(nModelId);		// モデル番号
											// 色がNULLではないなら
	if (pCol != NULL)
	{
		// モデルの色を変える
		pBombblock->SetModelColor(*pCol);
	}
	// 初期化処理
	pBombblock->Init();
	// 生成したオブジェクトを返す
	return pBombblock;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 周りのブロックを削除する処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBombblock::AroundDelete(void)
{
	// パーティクル生成
	C3DParticle::Create(
		C3DParticle::PARTICLE_ID_EXPLOSION,
		this->GetPos()
	);
	// 爆発音
	CManager::GetSound()->PlaySound(CSound::LABEL_SE_EXPLOSION);

	// ブロックのループ
	for (int nCntBlock = 0; nCntBlock < CScene::GetMaxLayer(CScene::LAYER_3DBLOCK); nCntBlock++)
	{
		// 情報取得
		CBaseblock * pBlock = (CBaseblock *)CScene::GetScene(CScene::LAYER_3DBLOCK, nCntBlock);	// ブロック情報

		// フィールドブロックなら
		if (this == pBlock ||
			pBlock->GetType() == CBaseblock::TYPE_FIELD) continue;

		// 範囲内にブロックが存在しているなら
		if (this->GetGrid() + CBaseblock::GRID(-1, -1, -1) <= pBlock->GetGrid() &&
			this->GetGrid() + CBaseblock::GRID(1, 0, 1) >= pBlock->GetGrid()
			)
		{
			// 指定したベースブロックを削除する処理
			DeleteBlock(pBlock);
		}
	}
}

#ifdef _DEBUG
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CBombblock::Debug(void)
{
	/*
	// 落ちる状態でなければ
	// 関数を抜ける
	if (CBaseblock::GetFall())
	{
	CDebugproc::Print("BombBlock::Fall = true\n");
	}
	else
	{
	CDebugproc::Print("BombBlock::Fall = false\n");
	}
	CDebugproc::Print("BombBlock::Pos(%.2f,%.2f,%.2f)\n",CScene_X::GetPos().x, CScene_X::GetPos().y, CScene_X::GetPos().z);
	*/
}
#endif // _DEBUG

