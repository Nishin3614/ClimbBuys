// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 兵士処理 [solider.h]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifndef _SOLIDER_H_
#define _SOLIDER_H_

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// インクルードファイル
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "enemy.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 前方宣言
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// クラス
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
class CSolider : public CEnemy
{
public:
	/* 列挙型*/
	// ---------モーションタイプ---------- //
	typedef enum
	{
		MOTIONTYPE_MAX
	} MOTIONTYPE;

	/* 関数 */
	CSolider();
	~CSolider();
	void Init(void);
	void Uninit(void);
	void Update(void);
	void Draw(void);
	// 兵士が死んだときの関数
	void Die(void);
#ifdef _DEBUG
	void Debug(void);
#endif // _DEBUG
	// 当たった後の処理
	//	nObjType	: オブジェクトタイプ
	//	pScene		: 相手のシーン情報
	virtual void Scene_MyCollision(
		int const &nObjType = 0,	// オブジェクトタイプ
		CScene * pScene = NULL		// 相手のシーン情報
	);
	// 相手に当てられた後の処理
	//	nObjType	: オブジェクトタイプ
	//	pScene		: 相手のシーン情報
	virtual void Scene_OpponentCollision(
		int const &nObjType = 0,	// オブジェクトタイプ
		CScene * pScene = NULL		// 相手のシーン情報
	);
	// 作成
	static CSolider * Create(
		D3DXVECTOR3 const & pos = D3DVECTOR3_ZERO,		// 位置
		D3DXVECTOR3 const & rot = D3DVECTOR3_ZERO		// 回転情報
	);
	static HRESULT LoadCreate(void);
	static HRESULT Load(void);		// 読み込み
	static void UnLoad(void);		// UnLoadする
	static void StaticInit(void);	// 静的変数の初期化
	static int GetAllNum(void);		// 総数
	static int GetKoCount(void) { return m_nKoCount; };	// 倒した数

protected:
private:
	/* 関数 */
	void move(void);	// 移動
	void rot(void);		// 回転

	/* 変数 */
	static int m_nAllNum;		// 現在存在している数
	static int m_nKoCount;		// 倒した数
	int m_nID;					// 番号
};
#endif
