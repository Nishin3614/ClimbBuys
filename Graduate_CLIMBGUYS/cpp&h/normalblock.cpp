// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 普通ブロック処理 [normalblock.cpp]
// Author : KOKI NISHIYAMA
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "normalblock.h"
#include "collision.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// オーバーローバーコンストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CNormalblock::CNormalblock() : CBaseblock::CBaseblock()
{

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CNormalblock::~CNormalblock()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CNormalblock::Init()
{
	// ブロックタイプの設定
	CBaseblock::SetType(TYPE_NORMAL);	// 普通のブロックタイプ
	// 落ちる設定
	CBaseblock::SetFall(true);
	// ベースブロック初期化処理
	CBaseblock::Init();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CNormalblock::Uninit(void)
{
	CBaseblock::Uninit();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CNormalblock::Update(void)
{
	CBaseblock::Update();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CNormalblock::Draw(void)
{
	CBaseblock::Draw();
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 当たった後の処理
//	nObjType	: 相手オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CNormalblock::Scene_MyCollision(
	int const & nObjType,
	CScene * pScene
)
{
	if (nObjType == CCollision::OBJTYPE_BLOCK)
	{
		// シーン情報がNULLなら
		// ->関数を抜ける
		if (pScene == NULL) return;
		// シーン情報の代入
		CBaseblock * pBaseBlock = (CBaseblock *)pScene;
		// シーン情報
		if (pBaseBlock->GetFall())
		{
			CBaseblock::SetFall(false);
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 相手に当てられた後の処理
//	nObjType	: 相手オブジェクトタイプ
//	pScene		: 相手のシーン情報
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CNormalblock::Scene_OpponentCollision(int const & nObjType, CScene * pScene)
{
	if (nObjType == CCollision::OBJTYPE_BLOCK)
	{
		// シーン情報がNULLなら
		// ->関数を抜ける
		if (pScene == NULL) return;
		// シーン情報の代入
		CBaseblock * pBaseBlock = (CBaseblock *)pScene;
		// シーン情報
		if (pBaseBlock->GetFall())
		{
			CBaseblock::SetFall(false);
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 普通ブロック全ソースの読み込み
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CNormalblock::Load(void)
{
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだ情報を破棄処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CNormalblock::UnLoad(void)
{

}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(シーン管理)
//	pos			: 位置
//	nModelId	: モデル番号
//	layer		: レイヤー
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CNormalblock * CNormalblock::Create(
	D3DXVECTOR3		const & pos,		// 位置
	int				const & nModelId,	// モデル番号
	CScene::LAYER	const & layer		// レイヤー
)
{
	// 変数宣言
	CNormalblock * pNormalblock;		// シーン2Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pNormalblock = new CNormalblock();
	// 設定
	// シーン管理設定
	pNormalblock->ManageSetting(layer);
	pNormalblock->SetPos(pos);			// 位置
	pNormalblock->SetModelId(nModelId);	// 位置
	// 初期化処理
	pNormalblock->Init();
	// 生成したオブジェクトを返す
	return pNormalblock;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成(個人管理)
//	pos			: 位置
//	nModelId	: モデル番号
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
CNormalblock * CNormalblock::Create_Self(
	D3DXVECTOR3		const & pos,									// 位置
	int				const & nModelId								// モデル番号
)
{
	// 変数宣言
	CNormalblock * pNormalblock;		// シーン2Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pNormalblock = new CNormalblock;
	// 設定
	pNormalblock->SetPos(pos);			// 位置
	pNormalblock->SetModelId(nModelId);	// 位置
	// 初期化処理
	pNormalblock->Init();
	// 生成したオブジェクトを返す
	return pNormalblock;
}

// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// unique_ptr作成(個人管理unique)
// ※戻り値はstd::moveで受け取る
//	pos			: 位置
//	nModelId	: モデル番号
// ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
std::unique_ptr<CNormalblock> CNormalblock::Creat_Unique(
	D3DXVECTOR3		const & pos,									// 位置
	int				const & nModelId								// モデル番号
)
{
	// 変数宣言
	std::unique_ptr<CNormalblock> pNormalblock(new CNormalblock);		// シーン2Dクラス
	// 設定
	pNormalblock->SetPos(pos);			// 位置
	pNormalblock->SetModelId(nModelId);	// 位置
	// 初期化処理
	pNormalblock->Init();
	// 生成したオブジェクトを返す
	return pNormalblock;
}


#ifdef _DEBUG
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void CNormalblock::Debug(void)
{

}
#endif // _DEBUG

