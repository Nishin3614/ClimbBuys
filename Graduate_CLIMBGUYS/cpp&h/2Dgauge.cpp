// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 2Dゲージ処理の説明[2Dgauge.cpp]
// Author : Nishiyama Koki
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "2Dgauge.h"
#include "scene_two.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// グローバル変数
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
int	C2DGauge::m_TexType[CCharacter::CHARACTER_MAX]
{
	56
};	// テクスチャータイプ

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// コンストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
C2DGauge::C2DGauge() : CScene::CScene()
{
	// 初期化
	for (int nCnt = 0; nCnt < GAUGE_MAX; nCnt++)
	{
		m_aScene_Two[nCnt] = NULL;			// シーン2D情報
		m_size[nCnt] = D3DVECTOR2_ZERO;		// サイズ情報
		m_col[nCnt] = D3DXCOLOR_INI;		// カラー情報
	}
	m_fSizeLast = 0;						// サイズの目標値
	m_fSizeDiff = 0;						// サイズの差分
	m_fConstance = 0;						// サイズが変わる定数
	m_pos = D3DVECTOR3_ZERO;				// 位置情報
	m_type = CCharacter::CHARACTER_NPC;			// キャラクタータイプ
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
C2DGauge::~C2DGauge()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::Init(void)
{
	// 変数宣言
	LPDIRECT3DDEVICE9 pDevice =					// デバイスの取得
		CManager::GetRenderer()->GetDevice();

	// メイン・サブ・背景色のゲージ生成
	for (int nCnt = 0; nCnt < GAUGE_MAX; nCnt++)
	{
		// 2Dシーンの生成
		m_aScene_Two[nCnt] = CScene_TWO::Create_Self(
			CScene_TWO::OFFSET_TYPE_LEFT,
			m_pos,
			m_size[nCnt],
			-1,
			0.0f,
			m_col[nCnt]
		);
	}

	CScene_TWO *pFream = NULL;

	switch (m_type)
	{
	case CCharacter::CHARACTER_NPC:
		pFream = CScene_TWO::Create(
			CScene_TWO::OFFSET_TYPE_LEFT,
			D3DXVECTOR3(m_pos.x - 103, m_pos.y - 5.5f, m_pos.z),
			D3DXVECTOR2(680.0f, 250.0f),
			m_TexType[m_type],
			0.0f,
			D3DXCOLOR(1.0f,0.64f,0.0f,1.0f));
		break;
	}

}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::Uninit(void)
{
	// メイン・サブ・背景色のゲージ終了
	for (int nCnt = 0; nCnt < GAUGE_MAX; nCnt++)
	{
		// 2DシーンのNULLチェック
		// ->開放
		if (m_aScene_Two[nCnt] != NULL)
		{
			m_aScene_Two[nCnt]->Release();
			m_aScene_Two[nCnt] = NULL;
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::Update(void)
{
	// ゲージの長さが0未満の場合抜ける
	if (m_size[GAUGE_UNDERLINE].x < 0)
	{
		return;
	}
	// プレイヤーのHPが変わっていない場合関数を抜ける
	else if (m_size[GAUGE_UNDERLINE].x == m_fSizeLast)
	{
		return;
	}
	// 差分分割加算
	m_size[GAUGE_UNDERLINE].x += m_fSizeDiff;
	// 目的のサイズ量に合わせる
	if (m_size[GAUGE_UNDERLINE].x < m_fSizeLast)
	{
		m_size[GAUGE_UNDERLINE].x = m_fSizeLast;
	}
	// 位置の設定
	m_aScene_Two[GAUGE_UNDERLINE]->SetSize(m_size[GAUGE_UNDERLINE]);
	// 頂点座標の設定
	m_aScene_Two[GAUGE_UNDERLINE]->Set_Vtx_Pos(CScene_TWO::OFFSET_TYPE_LEFT);
	// メイン・サブ・背景色のゲージ更新
	for (int nCnt = 0; nCnt < GAUGE_MAX; nCnt++)
	{
		// 2DシーンのNULLチェック
		// ->更新
		if (m_aScene_Two[nCnt] != NULL)
		{
			m_aScene_Two[nCnt]->Update();
		}
	}
}


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::Draw(void)
{
	// メイン・サブ・背景色のゲージ描画
	for (int nCnt = 0; nCnt < GAUGE_MAX; nCnt++)
	{
		// 2DシーンのNULLチェック
		// ->描画
		if (m_aScene_Two[nCnt] != NULL)
		{
			if (nCnt >= GAUGE_MAINLINE)
			{
				m_aScene_Two[nCnt]->Draw();
			}
		}
	}
}

#ifdef _DEBUG
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// デバッグ表示
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::Debug(void)
{
}
#endif // _DEBUG

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込み処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT C2DGauge::Load(void)
{
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込んだ情報を破棄
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::UnLoad(void)
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 生成(シーン管理)
//	pos		 : 位置
//	size	 : サイズ
//	Maincol	 : メインカラー
//	Undercol : サブカラー
//	Blockcol : 背景色
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
C2DGauge * C2DGauge::Create(
	D3DXVECTOR3 const &pos,			// 位置
	D3DXVECTOR2 const &size,		// サイズ
	D3DXCOLOR	const &Maincol,		// メインカラー
	CCharacter::CHARACTER	const &type,		// キャラクタータイプ
	D3DXCOLOR	const &Undercol,	// サブカラー
	D3DXCOLOR	const &Blockcol		// 背景色
)
{
	// 変数宣言
	C2DGauge * p2DGauge;
	// メモリの生成(初め->基本クラス,後->派生クラス)
	p2DGauge = new C2DGauge();
	// シーン管理設定
	p2DGauge->ManageSetting(CScene::LAYER_3DOBJECT);
	// 設定h
	p2DGauge->SetCol(Maincol, Undercol, Blockcol);	// カラー
	p2DGauge->m_pos = pos;							// 位置
	for (int nCntGauge = 0; nCntGauge < GAUGE_MAX; nCntGauge++)
	{
		p2DGauge->m_size[nCntGauge] = size;			// サイズ
	}
	p2DGauge->m_fSizeLast = size.x;					// サイズの目標値
	p2DGauge->m_type = type;						// タイプ設定
	// 初期化処理
	p2DGauge->Init();
	// 生成したオブジェクトを返す
	return p2DGauge;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 生成(個人管理)
//	pos		 : 位置
//	size	 : サイズ
//	Maincol	 : メインカラー
//	Undercol : サブカラー
//	Blockcol : 背景色
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
C2DGauge * C2DGauge::Create_Self(
	D3DXVECTOR3 const &pos,			// 位置
	D3DXVECTOR2 const &size,		// サイズ
	D3DXCOLOR	const &Maincol,		// メインカラー
	D3DXCOLOR	const &Undercol,	// サブカラー
	D3DXCOLOR	const &Blockcol		// 背景色
)
{
	// 変数宣言
	C2DGauge * p2DGauge;
	// メモリの生成(初め->基本クラス,後->派生クラス)
	p2DGauge = new C2DGauge();
	// 設定h
	p2DGauge->SetCol(Maincol, Undercol, Blockcol);	// カラー
	p2DGauge->m_pos = pos;							// 位置
	for (int nCntGauge = 0; nCntGauge < GAUGE_MAX; nCntGauge++)
	{
		p2DGauge->m_size[nCntGauge] = size;			// サイズ
	}
	p2DGauge->m_fSizeLast = size.x;					// サイズの目標値
	// 初期化処理
	p2DGauge->Init();
	// 生成したオブジェクトを返す
	return p2DGauge;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ゲージ変化
//	fValue	: ステータスの値
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::ChangeGauge(
	float const &fValue	// ステータスの値
)
{
	// サイズの更新
	m_fSizeLast = m_fConstance * fValue;
	// 目標のゲージのサイズが0未満の場合抜ける
	if (m_fSizeLast < 0)
	{
		return;
	}
	// 現在のサイズに代入(緑)
	m_size[GAUGE_MAINLINE].x = m_fSizeLast;
	// 差分分割
	m_fSizeDiff =
		(m_fSizeLast - m_size[GAUGE_UNDERLINE].x) /
		DERAY_TIME(1);
	// 位置の設定
	m_aScene_Two[GAUGE_MAINLINE]->SetSize(m_size[GAUGE_MAINLINE]);
	// 頂点座標の設定
	m_aScene_Two[GAUGE_MAINLINE]->Set_Vtx_Pos(CScene_TWO::OFFSET_TYPE_LEFT);
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ゲージの初期設定
//	fValue	: ステータスの値
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::BeginGauge(
	float const &fValue	// ステータスの値
)
{
	// サイズの更新
	m_fSizeLast = m_fConstance * fValue;
	for (int nCntGauge = 0; nCntGauge < GAUGE_MAX; nCntGauge++)
	{
		// ゲージブロックの場合スキップ
		if (nCntGauge == GAUGE_BLOCK)
		{
			continue;
		}
		// 現在のサイズに代入(緑)
		m_size[nCntGauge].x = m_fSizeLast;
		// 位置の設定
		m_aScene_Two[nCntGauge]->SetSize(m_size[nCntGauge]);
		// 頂点座標の設定
		m_aScene_Two[nCntGauge]->Set_Vtx_Pos(CScene_TWO::OFFSET_TYPE_LEFT);
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// ゲージの長さの固定値設定
//	fMaxValue : ステータスの最大値
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::SetConstance(
	float const &fMaxValue	// ステータスの最大値
)
{
	// 定数設定
	m_fConstance = m_size[GAUGE_BLOCK].x / fMaxValue;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// メインカラー設定
//	MainCol_R	: 右のメインカラー
//	MainCol_L	: 左のメインカラー
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::SetMainCol(
	D3DXCOLOR const & MainCol_R,	// メインカラー右
	D3DXCOLOR const & MainCol_L		// メインカラー左
)
{
	// 頂点カラー設定(右の色と左の色)
	m_aScene_Two[2]->Set_Vtx_Col2_RL(
		MainCol_R,
		MainCol_L
	);
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// メイン、サブ、背景のカラー設定
//	Maincol	: メインカラー
//	Subcp;	: サブカラー
//	BGcol	: 背景色
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::SetCol(
	D3DXCOLOR	const &Maincol,		// メインの色
	D3DXCOLOR	const &Subcol,		// サブカラー
	D3DXCOLOR	const &BGcol		// 背景色
)
{
	m_col[0] = BGcol;
	m_col[1] = Subcol;
	m_col[2] = Maincol;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 位置設定
//	pos	: 位置
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void C2DGauge::SetPos(
	D3DXVECTOR3 const & pos	// 位置
)
{
	// 位置設定
	m_pos = pos;
	// 各ゲージの位置設定
	for (int nCnt = 0; nCnt < GAUGE_MAX; nCnt++)
	{
		// 位置設定
		m_aScene_Two[nCnt]->SetPosition(m_pos);
		// 頂点座標の設定
		m_aScene_Two[nCnt]->Set_Vtx_Pos(CScene_TWO::OFFSET_TYPE_LEFT);
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// 位置取得処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
D3DXVECTOR3 & C2DGauge::GetPos(void)
{
	return m_pos;
}
