// =====================================================================================================================================================================
//
// マルチナンバーの処理 [multinumber.cpp]
// Author : Sato Yoshiki
//
// =====================================================================================================================================================================
#include "multinumber.h"			// インクルードファイル
#include "number.h"
#include "game.h"

// =====================================================================================================================================================================
// 静的メンバ変数の初期化
// =====================================================================================================================================================================

// =====================================================================================================================================================================
// マクロ定義
// =====================================================================================================================================================================
#define SCORE_POSX			(1050.0f)		// スコアの座標
#define SCORE_POSY			(30.0f)			// スコアの座標
#define SCORE_SIZEX			(15.0f)			// スコアの幅
#define SCORE_SIZEY			(20.0f)			// スコアの高さ

#define SCORE_LIFEUP		(10000)			// 体力が増えるスコアの値

// =====================================================================================================================================================================
//
// コンストラクタ
//
// =====================================================================================================================================================================
CMultiNumber::CMultiNumber()
{
	// 初期化
	m_pNumbers.clear();
}

// =====================================================================================================================================================================
//
// デストラクタ
//
// =====================================================================================================================================================================
CMultiNumber::~CMultiNumber()
{
}

// =====================================================================================================================================================================
//
// 初期化処理
//
// =====================================================================================================================================================================
void CMultiNumber::Init(void)
{

}

// =====================================================================================================================================================================
//
// 終了処理
//
// =====================================================================================================================================================================
void CMultiNumber::Uninit(void)
{
	m_pNumbers.clear();
}

// =====================================================================================================================================================================
//
// 更新処理
//
// =====================================================================================================================================================================
void CMultiNumber::Update(void)
{
	for (size_t nCnt = 0; nCnt < m_pNumbers.size(); nCnt++)
	{
		if (m_pNumbers[nCnt])
		{
			m_pNumbers[nCnt]->Update();
		}
	}
}

// =====================================================================================================================================================================
//
// 描画処理
//
// =====================================================================================================================================================================
void CMultiNumber::Draw(void)
{	
	for (size_t nCnt = 0; nCnt < m_pNumbers.size(); nCnt++)
	{
		if (m_pNumbers[nCnt])
		{
			m_pNumbers[nCnt]->Draw();
		}
	}
}

// =====================================================================================================================================================================
//
// マルチナンバーの生成
//
// =====================================================================================================================================================================
CMultiNumber * CMultiNumber::Create(D3DXVECTOR3 pos, D3DXVECTOR2 size, int nValue, int nDigit, float fSpace)
{
	// 変数
	CMultiNumber *pMultiNumber;

	// メモリの確保
	pMultiNumber = new CMultiNumber;

	if (pMultiNumber)
	{
		// 初期化
		pMultiNumber->Init();

		// 指定した桁数分回す
		for (int nCnt = 0; nCnt < nDigit; nCnt++)
		{
			// シーン2Dの生成
			pMultiNumber->m_pNumbers.emplace_back(CNumber::Create(nValue, pos, CTexture_manager::TYPE_UI_NUMBER));

			if (pMultiNumber->m_pNumbers[nCnt])
			{
				//位置の設定
				pMultiNumber->m_pNumbers[nCnt]->SetPosition(D3DXVECTOR3(pos.x + nCnt * fSpace, pos.y, 0.0f));
				// サイズの設定
				pMultiNumber->m_pNumbers[nCnt]->SetSize(size);

				pMultiNumber->m_pNumbers[nCnt]->Set_Vtx_Pos();
			}
		}
	}
	return pMultiNumber;
}

// =====================================================================================================================================================================
//
// スコアの設定
//
// =====================================================================================================================================================================
void CMultiNumber::SetScore(int nScore)
{
	// 変数宣言
	int nNumber		= 0;

	for (size_t nCntScore = 0; nCntScore < m_pNumbers.size(); nCntScore++)
	{
		// 桁数計算
		nNumber = nScore % (int)pow(10.0f, m_pNumbers.size() - nCntScore) / (int)pow(10.0f, (m_pNumbers.size() - nCntScore - 1));

		// 番号設定処理
		m_pNumbers[nCntScore]->SetNum(nNumber);
	}
}

// =====================================================================================================================================================================
//
// 位置の設定
//
// =====================================================================================================================================================================
void CMultiNumber::SetPos(D3DXVECTOR3 pos)
{
	//位置代入
	m_pos = pos;

	//桁数分繰り返す
	for (size_t nCnt = 0; nCnt < m_pNumbers.size(); nCnt++)
	{
		//nullcheck
		if (m_pNumbers[nCnt])
		{
			//位置の設定
			m_pNumbers[nCnt]->SetPosition(pos + D3DXVECTOR3(-m_pNumbers[nCnt]->GetSize().x * (m_pNumbers.size() - 1) * 0.5f + m_pNumbers[nCnt]->GetSize().x * nCnt, 0.0f, 0.0f));
			m_pNumbers[nCnt]->Set_Vtx_Pos();
		}
	}
}

// =====================================================================================================================================================================
//
// サイズの設定
//
// =====================================================================================================================================================================
void CMultiNumber::SetSize(D3DXVECTOR2 size)
{
	//サイズ代入
	m_size = size;

	//桁数分繰り返す
	for (size_t nCnt = 0; nCnt < m_pNumbers.size(); nCnt++)
	{
		//nullcheck
		if (m_pNumbers[nCnt])
		{
			//サイズの設定
			m_pNumbers[nCnt]->SetSize(size);
		}
	}
	SetPos(GetPos());
}