// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// リザルトUI[resultUI.cpp]
// Author : Yoshiki Sato
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// インクルードファイル
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
#include "resultUI.h"
#include "basemode.h"
#include "debugproc.h"
#include "scene_two.h"

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// マクロ定義
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
#define RESULT_UI_FRAME_SIZE		(D3DXVECTOR2(320.0f, SCREEN_HEIGHT))	// リザルトUIの枠のサイズ
#define RESULT_UI_FRAME_POS			(D3DXVECTOR3(160.0f + 320.0f * 0, 1080.0f, 0.0f))		// リザルトUIの枠の位置

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
//
// 静的変数宣言
//
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// イニシャライザコンストラクタ
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
CResultUI::CResultUI()
{
	// 初期化
	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		m_pScene2D[nCnt] = nullptr;
	}
	m_move = D3DVECTOR3_ZERO;		// 移動量
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// デストラクタ処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
CResultUI::~CResultUI()
{
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 初期化処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CResultUI::Init(void)
{
	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		if (m_pScene2D[nCnt])
		{
			// 位置の設定
			m_pScene2D[nCnt]->SetPosition(RESULT_UI_FRAME_POS);
			// サイズの設定
			m_pScene2D[nCnt]->SetSize(RESULT_UI_FRAME_SIZE);
			// サイズの設定
			m_pScene2D[nCnt]->BindTexture(CTexture_manager::TYPE_RESULT_UI_FRAME_1P);

			// 初期化
			m_pScene2D[nCnt]->Init();
		}
	}
	m_move = D3DXVECTOR3(0.0f, -70.0f, 0.0f);	// 移動量
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 終了処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CResultUI::Uninit(void)
{
	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		if (m_pScene2D[nCnt])
		{
			// 終了
			m_pScene2D[nCnt] = nullptr;
		}
	}
}
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 更新処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CResultUI::Update(void)
{
	// 位置の取得
	m_pos = m_pScene2D[0]->GetPosition();

	m_pos.y += m_move.y;

	if (m_pos.y <= 360.0f)
	{
		m_pos.y = 360.0f;
	}
	
	// 位置の設定
	m_pScene2D[0]->SetPosition(m_pos);
	m_pScene2D[0]->Set_Vtx_Pos();

	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		if (m_pScene2D[nCnt])
		{
			// 更新
			m_pScene2D[nCnt]->Update();
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 描画処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CResultUI::Draw(void)
{
	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		if (m_pScene2D[nCnt])
		{
			// 描画
			m_pScene2D[nCnt]->Draw();
		}
	}
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 作成処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
CResultUI * CResultUI::Create(void)
{
	// 変数宣言
	CResultUI * pResultUI;		// シーン2Dクラス
	// メモリの生成(初め->基本クラス,後->派生クラス)
	pResultUI = new CResultUI();

	for (int nCnt = 0; nCnt < (int)RESULT_UI::UI_MAX; nCnt++)
	{
		// シーン2Dの生成
		pResultUI->m_pScene2D[nCnt] = CScene_TWO::Create(CScene_TWO::OFFSET_TYPE_CENTER, D3DVECTOR3_ZERO, D3DVECTOR2_ZERO, CTexture_manager::TYPE_NONE);
	}
	// 初期化処理
	pResultUI->Init();

	// 生成したオブジェクトを返す
	return pResultUI;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// 読み込み処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
HRESULT CResultUI::Load(void)
{
	return S_OK;
}

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
// unload処理
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------
void CResultUI::UnLoad(void)
{
}